import os
from flask import Flask, request, redirect, send_file, jsonify
from google.cloud import storage
import json
import tempfile
import google.generativeai as genai

# Load API key from environment variable
GENAI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GENAI_API_KEY:
    raise ValueError("Missing Gemini AI API Key. Set GEMINI_API_KEY as an environment variable.")

genai.configure(api_key=GENAI_API_KEY)

# Google Cloud Configuration
PROJECT_ID = "clouddev1-452119"
BUCKET_NAME = f"project2-452119-bucket"
REGION = "us-central1"

# Initialize Flask
app = Flask(__name__)

# Initialize Google Cloud Storage client
storage_client = storage.Client()

def upload_blob(bucket_name, source_file, destination_blob):
    bucket = storage_client.bucket(bucket_name)
    blob = bucket.blob(destination_blob)
    blob.upload_from_filename(source_file)
    print(f"Uploaded {destination_blob} to bucket {bucket_name}.")

def list_blobs(bucket_name):
    bucket = storage_client.bucket(bucket_name)
    return [blob.name for blob in bucket.list_blobs() if blob.name.endswith((".jpeg", ".jpg"))]

def upload_to_gemini(path, mime_type="image/jpeg"):
    """
    Uploads an image file to Gemini AI and returns the uploaded file object.
    """
    try:
        file = genai.upload_file(path, mime_type=mime_type)

        if not file:
            raise ValueError("Upload failed: No file returned from Gemini AI.")

        print("Successfully uploaded image to Gemini AI.")
        return file

    except Exception as e:
        print(f"Error uploading to Gemini AI: {e}")
        return None

def generate_gemini_caption(image_path, mime_type="image/jpeg"):
    """
    Generates a title and description from the Gemini multimodal model for an uploaded image.
    """
    gemini_file = upload_to_gemini(image_path, mime_type=mime_type)
    
    if gemini_file is None:
        return {"title": "Upload Failed", "description": "Could not generate description due to upload error."}

    try:
        model = genai.GenerativeModel("gemini-1.5-flash")
        response = model.generate_content([
    {"mime_type": "image/jpeg", "data": open(image_path, "rb").read()},
    {"text": "Describe this image in detail."}
])

        if not response or not response.text:
            return {"title": "Processing Error", "description": "No description generated by Gemini AI."}

        # Extract title and description from the response
        result_text = response.text.strip()
        title, description = result_text.split(". ", 1) if ". " in result_text else ("Generated Title", result_text)

        print(f"Title: {title}")
        print(f"Description: {description}")

        return {"title": title.strip(), "description": description.strip()}

    except Exception as e:
        print(f"Error processing image with Gemini AI: {e}")
        return {"title": "Error", "description": "An error occurred while generating the description."}

@app.route('/')
def index():
    index_html = """
    <h2>Upload a JPEG Image</h2>
    <form method="post" enctype="multipart/form-data" action="/upload">
      <label>Choose file:</label>
      <input type="file" name="form_file" accept="image/jpeg"/>
      <button>Upload</button>
    </form><hr><h2>Uploaded Images</h2><ul>
    """
    for file in list_blobs(BUCKET_NAME):
        index_html += f"<li><a href='/files/{file}'>{file}</a></li>"
    index_html += "</ul>"
    return index_html

@app.route('/upload', methods=["POST"])
def upload():
    file = request.files['form_file']
    filename = file.filename

    with tempfile.NamedTemporaryFile(delete=False) as temp_img:
        file.save(temp_img.name)
        upload_blob(BUCKET_NAME, temp_img.name, filename)

    metadata = generate_gemini_caption(temp_img.name)
    json_filename = filename.rsplit('.', 1)[0] + ".json"

    with tempfile.NamedTemporaryFile(mode='w+', delete=False) as temp_json:
        json.dump(metadata, temp_json)
        temp_json.seek(0)
        upload_blob(BUCKET_NAME, temp_json.name, json_filename)
    
    return f"<h2>Title: {metadata['title']}</h2><p>Description: {metadata['description']}</p><a href='/'>Back to Upload</a>"

@app.route('/files/<filename>')
def get_file(filename):
    bucket = storage_client.bucket(BUCKET_NAME)
    blob = bucket.blob(filename)
    temp_file = tempfile.NamedTemporaryFile(delete=False)
    blob.download_to_filename(temp_file.name)
    return send_file(temp_file.name, as_attachment=True)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=True)
